/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.ControladorEventos;
import Modelo.Cliente;
import Modelo.MesaDeDulces;
import Modelo.Proveedor;
import Modelo.Servicio;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lalo
 */
public class vtnAgregaEventoSocial extends javax.swing.JFrame {

    private static vtnAgregaEventoSocial ventanaAgregaEvento
            = new vtnAgregaEventoSocial();

    /**
     * Creates new form vtnAgregaEventoSocial
     */
    private vtnAgregaEventoSocial() {
        initComponents();
        inicializarGrupoDeBotones();
        llenarListaDeEmpleados();
        llenarListaDeMesasDeDulces();

        this.setLocationRelativeTo(null);
    }

    /**
     * Métod singleton del JFrame para agregar un nuevo evento.
     *
     * @return la instancia del JFrame para agregar un nuevo evento.
     */
    public static vtnAgregaEventoSocial getInstanciaVtnAgregaEvento() {
        return ventanaAgregaEvento;
    }

    private void inicializarGrupoDeBotones() {
        grupoDePaquetes.add(rbPaqBasico);
        grupoDePaquetes.add(rbPaqIntermedio);
        grupoDePaquetes.add(rbPaqCompleto);
        establecerFechaEnPantalla();
    }

    private void llenarListaDeEmpleados() {

        try {
            ControladorEventos controlador = new ControladorEventos();
            String[] datos = controlador.obtenerInformacionBasicaEmpleado();

            listaEmpleados.setListData(datos);

        } catch (SQLException ex) {
            mostrarMensajeEnPantalla("Error con la base de datos: " + ex.getLocalizedMessage());
        }

    }

    private void establecerFechaEnPantalla() {
        Calendar fecha = new GregorianCalendar();
        int dia = fecha.get(Calendar.DAY_OF_MONTH);
        int mes = fecha.get(Calendar.MONTH);
        int anio = fecha.get(Calendar.YEAR);

        comboDia.setSelectedIndex(dia - 1);
        comboMes.setSelectedIndex(mes);

        comboAnio.addItem(anio - 1);
        comboAnio.addItem(anio);
        comboAnio.addItem(anio + 1);
        comboAnio.setSelectedItem(anio);
    }

    private void llenarListaDeMesasDeDulces() {
        try {
            ControladorEventos unControlador = new ControladorEventos();
            LinkedList<MesaDeDulces> mesas = unControlador.encontrarMesasDeDulces();
            llenarLista(listaDeMesas, numColumnasDeMesas, mesas);
        } catch (SQLException ex) {
            mostrarMensajeEnPantalla("Error con la base de datos: " + ex.getLocalizedMessage());
        }
    }

    private static final int numColumnasDeProveedores = 4;

    private void llenarListaProveedores() {
        try {
            //obtenemos el controlador que nos ayudará a encontrar los proveedores:
            ControladorEventos unControlador = new ControladorEventos();
            LinkedList proveedores = unControlador.encontrarProveedoresDeServicioBasico();

            //pintamos la lista en la tabla:
            llenarLista(listaDeProveedoresConServicios, numColumnasDeProveedores, proveedores);

        } catch (SQLException ex) {
            mostrarMensajeEnPantalla("Error con la base de datos: " + ex.getLocalizedMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoDePaquetes = new javax.swing.ButtonGroup();
        lbTitulo = new javax.swing.JLabel();
        panelListaClientes = new javax.swing.JScrollPane();
        listaClientes = new javax.swing.JTable();
        txtNombreCliente = new javax.swing.JTextField();
        lbNombre = new javax.swing.JLabel();
        btnBuscarCliente = new javax.swing.JButton();
        panelListaEmpleados = new javax.swing.JScrollPane();
        listaEmpleados = new javax.swing.JList();
        lbEmpleados = new javax.swing.JLabel();
        panelDeMesas = new javax.swing.JScrollPane();
        listaDeMesas = new javax.swing.JTable();
        lbTituloMesa = new javax.swing.JLabel();
        rbPaqBasico = new javax.swing.JRadioButton();
        rbPaqIntermedio = new javax.swing.JRadioButton();
        rbPaqCompleto = new javax.swing.JRadioButton();
        lbTituloPaq = new javax.swing.JLabel();
        PanelDeServicios = new javax.swing.JScrollPane();
        listaDeProveedoresConServicios = new javax.swing.JTable();
        btnAgregarEvento = new javax.swing.JButton();
        lbSeleccioneServicios = new javax.swing.JLabel();
        comboDia = new javax.swing.JComboBox();
        comboMes = new javax.swing.JComboBox();
        comboAnio = new javax.swing.JComboBox();
        lbTituloFecha = new javax.swing.JLabel();
        lbDia = new javax.swing.JLabel();
        lbMes = new javax.swing.JLabel();
        lbAnio = new javax.swing.JLabel();
        btnRegreso = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Agregará un nuevo Evento Social.");

        lbTitulo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbTitulo.setText("Evento Social.");

        listaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Dirección", "Teléfono", "Correo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        panelListaClientes.setViewportView(listaClientes);

        lbNombre.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbNombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbNombre.setText("Escriba el nombre del cliente que quiere un nuevo evento:");

        btnBuscarCliente.setText("Buscar Cliente");
        btnBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarClienteActionPerformed(evt);
            }
        });

        listaEmpleados.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Empleado 1", "Empleado 2", "Empleado 3", "Empleado 4", "Empleado 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        panelListaEmpleados.setViewportView(listaEmpleados);

        lbEmpleados.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbEmpleados.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbEmpleados.setText("Escoja un Empleado para el evento:");

        listaDeMesas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nombre ", "Costo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        panelDeMesas.setViewportView(listaDeMesas);

        lbTituloMesa.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbTituloMesa.setText("Escoja la mesa que desea");

        rbPaqBasico.setText("Paquete Básico");
        rbPaqBasico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPaqBasicoActionPerformed(evt);
            }
        });

        rbPaqIntermedio.setText("Paquete Intermedio");

        rbPaqCompleto.setText("Paquete Completo");

        lbTituloPaq.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbTituloPaq.setText("Escoja el paquete que desea:");

        listaDeProveedoresConServicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Servicio", "Costo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listaDeProveedoresConServicios.setName("proveedoresConServicios"); // NOI18N
        PanelDeServicios.setViewportView(listaDeProveedoresConServicios);

        btnAgregarEvento.setText("Agregar Evento");
        btnAgregarEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarEventoActionPerformed(evt);
            }
        });

        lbSeleccioneServicios.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbSeleccioneServicios.setText("Seleccione los proveedores que desea:");

        comboDia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        comboMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));

        lbTituloFecha.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbTituloFecha.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTituloFecha.setText("Escoja la fecha en la que el evento se realizará");

        lbDia.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDia.setText("Dia");

        lbMes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMes.setText("Mes");

        lbAnio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbAnio.setText("Año");

        btnRegreso.setText("Regresar");
        btnRegreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(174, 174, 174)
                .addComponent(btnRegreso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAgregarEvento)
                .addGap(220, 220, 220))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lbTitulo)
                        .addGap(379, 379, 379))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(panelListaClientes)
                        .addContainerGap())
                    .addComponent(PanelDeServicios)))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbNombre))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarCliente))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbPaqBasico)
                                .addGap(96, 96, 96)
                                .addComponent(rbPaqIntermedio)
                                .addGap(50, 50, 50)
                                .addComponent(rbPaqCompleto))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(224, 224, 224)
                                .addComponent(lbTituloPaq))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbEmpleados)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(panelListaEmpleados, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(115, 115, 115)
                                .addComponent(lbTituloMesa)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbTituloFecha))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelDeMesas, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboDia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lbDia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 16, Short.MAX_VALUE))
                                    .addComponent(comboAnio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(lbSeleccioneServicios)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lbTitulo)
                .addGap(32, 32, 32)
                .addComponent(lbNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelListaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbEmpleados)
                            .addComponent(lbTituloMesa)
                            .addComponent(lbTituloFecha))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelListaEmpleados, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(panelDeMesas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbDia)
                            .addComponent(lbMes)
                            .addComponent(lbAnio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)))
                .addComponent(lbTituloPaq)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbPaqBasico)
                            .addComponent(rbPaqIntermedio)
                            .addComponent(rbPaqCompleto))
                        .addGap(13, 13, 13)
                        .addComponent(lbSeleccioneServicios)
                        .addGap(18, 18, 18)
                        .addComponent(PanelDeServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAgregarEvento)
                        .addContainerGap(36, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRegreso)
                        .addGap(22, 22, 22))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static final int numColumnasDeClientes = 5;

    private void btnBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarClienteActionPerformed
        try {
            // TODO add your handling code here:

            ControladorEventos controlDeEventos = new ControladorEventos();
            String nombre = this.txtNombreCliente.getText();
            LinkedList<Cliente> Clientes = controlDeEventos.obtenerInformacionClientes(nombre);
            llenarLista(listaClientes, numColumnasDeClientes, Clientes);
        } catch (SQLException ex) {
            mostrarMensajeEnPantalla("Error con la base de datos: " + ex.getLocalizedMessage());
        }

    }//GEN-LAST:event_btnBuscarClienteActionPerformed

    private void rbPaqBasicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPaqBasicoActionPerformed
        // TODO add your handling code here:
        //Solo está implementado con el paquete básico:
        llenarListaProveedores();


    }//GEN-LAST:event_rbPaqBasicoActionPerformed

    private Date convetirStrEnDate(String strFecha){
        Date dateFecha = null;
        DateFormat formatoDelTexto = new SimpleDateFormat("yyyy-MM-dd");
        try {
            dateFecha = formatoDelTexto.parse(strFecha);
            
        } catch (ParseException ex) {
            Logger.getLogger(vtnAgregaEventoSocial.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return dateFecha;
    }

    private void btnAgregarEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarEventoActionPerformed
        //obtenemos lo necesario de la vista:
        int idCliente = obtenerClaveClienteSeleccionado();
        int idEmpleado = obtenerClaveEmpleadoSeleccionado();
        int idMesa = obtenerClaveMesaSeleccionada();
        String fecha = obtenerFecha();

        Object[] proveedores = obtenerProveedores();
        float precioTotal = obtenerPrecio();
        int idPaquete = obtenerTipoPaquete();

        //creamos el controlador de eventos.
        try {
            ControladorEventos unControlador = new ControladorEventos();
            
            boolean existe = unControlador.ExisteElEvento(idCliente, idMesa, fecha, idEmpleado);
            if(existe){
                mostrarMensajeEnPantalla("Este evento ya existe");
            }else{
            boolean seAgregoEvento = unControlador.agregarEvento(idCliente,
                    idEmpleado, idMesa, proveedores, idPaquete,
                    precioTotal, fecha);
            if (seAgregoEvento) {
                mostrarMensajeEnPantalla("Evento Agregado");
            } else {
                mostrarMensajeEnPantalla("Evento NO Agregado");
            }
        }
        } catch (SQLException ex) {
            mostrarMensajeEnPantalla("Error con la BD este evento ya existe " );
        }
    
    }//GEN-LAST:event_btnAgregarEventoActionPerformed

    private void btnRegresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresoActionPerformed
        // TODO add your handling code here:
        
        //hay que limpiar toda la pantalla.
        VtnEventosSociales regreso = new VtnEventosSociales();
        regreso.setVisible(true);
        this.dispose();
        
        
    }//GEN-LAST:event_btnRegresoActionPerformed

    private String obtenerFecha() {
        int dia = Integer.parseInt((String) comboDia.getSelectedItem());
        int mes = comboMes.getSelectedIndex() + 1;
        int anio = (int) comboAnio.getSelectedItem();
        GregorianCalendar fechaEscogida = new GregorianCalendar(anio, mes, dia);

        String fechaEnTexto = convertirFechaEnTexto(fechaEscogida);

        return fechaEnTexto;
    }

    private String convertirFechaEnTexto(GregorianCalendar fecha) {
        String strFecha = "";
        strFecha += fecha.get(Calendar.YEAR) + "-";
        strFecha += fecha.get(Calendar.MONTH) + "-";
        strFecha += fecha.get(Calendar.DATE);
        return strFecha;
    }
    
    
  

    private int obtenerClaveClienteSeleccionado() {

        int renglonSeleccionado = listaClientes.getSelectedRow();
        int claveCliente = (int) listaClientes.getValueAt(renglonSeleccionado, 0);

        return claveCliente;
    }

    private int obtenerClaveEmpleadoSeleccionado() {
        String datosEmpleado = (String) listaEmpleados.getSelectedValue();

        StringTokenizer tokens = new StringTokenizer(datosEmpleado);
        int claveEmpleado = Integer.parseInt(tokens.nextToken());

        return claveEmpleado;
    }

    private int obtenerClaveMesaSeleccionada() {
        int renglonSeleccionado = listaDeMesas.getSelectedRow();
        int claveMesa = (int) listaDeMesas.getValueAt(renglonSeleccionado, 0);

        return claveMesa;
    }

    private static final int columnaIdProveedor = 0;
    private static final int columnaNombreServicio = 2;

    private Object[] obtenerProveedores() {
        //declaramos lo que necesitamos:
        int[] renglonesSeleccionados = listaDeProveedoresConServicios.getSelectedRows();

        Object[] proveedores = new Object[renglonesSeleccionados.length * 2];
        //Se multiplica por 2, porque de a pares se guardará la información en el arreglo
        //primer casillero del arreglo es el id, segundo es el nombre del proveedor.

        int indice = 0;
        int idProveedor = 0;
        String nombreProveedor = "";
        //empezamos a obtener los datos de las listas:
        for (int vueltas = 0; vueltas < renglonesSeleccionados.length; vueltas++) {
            //obtenemos el ID del proveedor:
            idProveedor = (int) listaDeProveedoresConServicios.
                    getValueAt(renglonesSeleccionados[vueltas], columnaIdProveedor);

            
            //obtenemos el nombre del servicio que provee el proveedor:
            nombreProveedor = (String) listaDeProveedoresConServicios.
                    getValueAt(renglonesSeleccionados[vueltas], columnaNombreServicio);
            
            
            proveedores[indice] = idProveedor;
            proveedores[indice + 1] = nombreProveedor;
            

            indice += 2;
        }

        return proveedores;
    }

    
    /**
     * Falta Usarla.
     */
    private boolean verificarProveedores(int idProveedor1, int idProveedor2) {
        if (idProveedor1 == idProveedor2) {
            return true;
        }

        return false;
    }

    private static final int columnaPrecio = 3;

    private float obtenerPrecio() {
        int[] renglonesSeleccionados = listaDeProveedoresConServicios.getSelectedRows();
        float precio = 0;

        for (int vueltas = 0; vueltas < renglonesSeleccionados.length; vueltas++) {
            precio += (float) listaDeProveedoresConServicios.getValueAt(renglonesSeleccionados[vueltas], columnaPrecio);
        }
           //System.out.println("Precio es" + precio);
        return precio;
    }

    private static final int paqueteBasico = 1;
    private static final int paqueteIntermedio = 2;
    private static final int paqueteCompleto = 3;
    private static final int paqueteInvalido = 0;

    private int obtenerTipoPaquete() {
        if (rbPaqBasico.isSelected()) {
            return paqueteBasico;
        }
        if (rbPaqIntermedio.isSelected()) {
            return paqueteIntermedio;
        }
        if (rbPaqCompleto.isSelected()) {
            return paqueteCompleto;
        }
        //Si llega hasta aquí, entonces no seleccionó alguno
        return paqueteInvalido;
    }

    private static final int numColumnasDeMesas = 3;

    private void llenarLista(JTable tabla, int numColumnas, LinkedList listaDeDatos) {

        Object[] renglonDeDatos = new Object[numColumnas];

        DefaultTableModel modeloLista = (DefaultTableModel) tabla.getModel();

        limpiarLista(tabla);

        boolean seAgregaranProveedores = false;

        for (Object dato : listaDeDatos) {
            switch (numColumnas) {
                case numColumnasDeClientes:
                    renglonDeDatos[0] = ((Cliente) dato).getIdPersona();
                    renglonDeDatos[1] = ((Cliente) dato).getNombrePersona();
                    renglonDeDatos[2] = ((Cliente) dato).getDireccionPersona();
                    renglonDeDatos[3] = ((Cliente) dato).getTelefonoPersona();
                    renglonDeDatos[4] = ((Cliente) dato).getCorreoPersona();
                    break;

                case numColumnasDeMesas:
                    renglonDeDatos[0] = ((MesaDeDulces) dato).getIdMesaDulces();
                    renglonDeDatos[1] = ((MesaDeDulces) dato).getNombreDeMesa();
                    renglonDeDatos[2] = ((MesaDeDulces) dato).getPrecio();
                    break;

                case numColumnasDeProveedores:
                    String nombreProveedor = ((Proveedor) dato).getNombrePersona();
                    int idProveedor = ((Proveedor) dato).getIdPersona();
                    LinkedList<Servicio> serviciosDeProveedor = ((Proveedor) dato).getServiciosQueProvee();

                    for (Servicio unServicio : serviciosDeProveedor) {
                        renglonDeDatos[0] = idProveedor;
                        renglonDeDatos[1] = nombreProveedor;
                        renglonDeDatos[2] = unServicio.getServNombre();
                        renglonDeDatos[3] = unServicio.getCosto();
                        modeloLista.addRow(renglonDeDatos);
                    }
                    seAgregaranProveedores = true;
                    break;

            }
            //Si se agregan proveedores, entonces los renglones
            //ya han sido agregados a las tablas.
            if (!seAgregaranProveedores) {
                modeloLista.addRow(renglonDeDatos);
            }
        }

        tabla.setModel(modeloLista);
    }

    private void limpiarLista(JTable tabla) {
        DefaultTableModel modeloDeLaTabla = (DefaultTableModel) tabla.getModel();
        for (int i = 0; i < tabla.getRowCount(); i++) {
            modeloDeLaTabla.removeRow(0);
            i -= 1;
        }
    }

    private void mostrarMensajeEnPantalla(String msg) {
        JOptionPane.showMessageDialog(null, msg);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vtnAgregaEventoSocial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vtnAgregaEventoSocial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vtnAgregaEventoSocial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vtnAgregaEventoSocial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vtnAgregaEventoSocial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane PanelDeServicios;
    private javax.swing.JButton btnAgregarEvento;
    private javax.swing.JButton btnBuscarCliente;
    private javax.swing.JButton btnRegreso;
    private javax.swing.JComboBox comboAnio;
    private javax.swing.JComboBox comboDia;
    private javax.swing.JComboBox comboMes;
    private javax.swing.ButtonGroup grupoDePaquetes;
    private javax.swing.JLabel lbAnio;
    private javax.swing.JLabel lbDia;
    private javax.swing.JLabel lbEmpleados;
    private javax.swing.JLabel lbMes;
    private javax.swing.JLabel lbNombre;
    private javax.swing.JLabel lbSeleccioneServicios;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JLabel lbTituloFecha;
    private javax.swing.JLabel lbTituloMesa;
    private javax.swing.JLabel lbTituloPaq;
    private javax.swing.JTable listaClientes;
    private javax.swing.JTable listaDeMesas;
    private javax.swing.JTable listaDeProveedoresConServicios;
    private javax.swing.JList listaEmpleados;
    private javax.swing.JScrollPane panelDeMesas;
    private javax.swing.JScrollPane panelListaClientes;
    private javax.swing.JScrollPane panelListaEmpleados;
    private javax.swing.JRadioButton rbPaqBasico;
    private javax.swing.JRadioButton rbPaqCompleto;
    private javax.swing.JRadioButton rbPaqIntermedio;
    private javax.swing.JTextField txtNombreCliente;
    // End of variables declaration//GEN-END:variables
}
